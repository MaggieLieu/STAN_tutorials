get_num_divergent(fit)
fit = stan('model.stan', data=schools_dat, chains=4, iter=10000, warmup=500, control=list(adapt_delta=0.85))
get_num_divergent(fit)
fit = stan('model.stan', data=schools_dat, chains=4, iter=10000, warmup=500, control=list(adapt_delta=0.85))
get_num_divergent(fit)
fit = stan('model.stan', data=schools_dat, chains=4, iter=10000, warmup=500, control=list(adapt_delta=0.85))
get_num_divergent(fit)
fit = stan('model.stan', data=schools_dat, chains=4, iter=10000, warmup=500, control=list(adapt_delta=0.85))
get_num_divergent(fit)
fit = stan('model.stan', data=schools_dat, chains=4, iter=10000, warmup=500, control=list(adapt_delta=0.95))
get_num_divergent(fit)
print(fit)
get_num_divergent(fit)
fit = stan('model.stan', data=schools_dat, chains =4, iter=10000, warmup=500, control=list(adapt_delta=0.95))
82.24*12
30000/(82.24*12)
21414+9500
(21414+9500-12500)*0.2
8084-3682
21414-(21414+9500-12500)*0.2
(7238+9500-12500)*0.2
(14333+9500-12500)*0.2
9449+18507-3682
9449+18507-847.6-2266.6
(14333-12500)*0.2
9449+18507-847.6-366.6
10000*7*8.5
28*86\
28*86
2000+(9*150)+(9*350)+2000+(4*100)
60652/157695
60652/(60652+157695)
50/(180)
54/(180)
12+3+7
90/22
2000+(9*150)+9*350+2000+100*4
datasets(E)
datasets()
data(EUStockMarkets)
data(EUStockmarkets)
data()
data(EuStockMarkets)
EuStockMarkets
write.csv('EuStockMarkets.csv', EuStockMarkets)
time(EuStockMarkets)
time(EuStockMarkets)$time
time(EuStockMarkets)$t
EuStockMarkets$FTSE
EuStockMarkets['FTSE']
t=time(EuStockMarkets)
t
EuStockMarkets
EuStockMarkets['Stocks']
EuStockMarkets['Stock']
names(EuStockMarkets)
head(EuStockMarkets)
EuStockMarkets[,'FTSE']
head(EuStockMarkets)
ftse= EuStockMarkets[,'FTSE']
out = data.frame('t':t, 'FTSE':ftse)
dim(t)
t['time']
head(t)
t
ftse
ts = data.frame(year=time(EuStockMarkets))
stocks=data.frame(EuStockMarkets)
ts
stocks=data.frame(year = time(EuStockMarkets), EuStockMarkets)
stocks
write.csv('EuStockMarket', stocks, quote=FALSE, row.names=FALSE)
write.csv(stocks,'EuStockMarket',quote=FALSE, row.names=FALSE)
data()
rgamma(100,0.1,0.1)
plot(density(rgamma(1000,0.1,0.1)))
plot(density(rgamma(1000,0.1,0.1)), xlim=x(0,1))
plot(density(rgamma(1000,0.1,0.1)), xlim=c(0,1))
plot(density(rgamma(1000,0.1,0.01)), xlim=c(0,1))
plot(density(rgamma(1000,0.1,0.1)), xlim=c(0,1))
plot(density(rgamma(1000,0.3,0.3)), xlim=c(0,1))
186.19-9.15
(186.19-9.15)/24
7.37/10000
5/50000
7*5
35/5
430000-60000
43000*0.2
430000*0.2
86000+37000
60000+180000
(60000+180000)/0.8*1
335*0.2
335-67-60
x=seq(-10,10,0.1)
y=dpois(x, 0.2)
x=seq(0,10,0.1)
y=dpois(x, 0.2)
warnings()
x=seq(-10,10,1)
y=dpois(x, 0.2)
plot(x,y)
plot(x,y, ty='l')
x=seq(0,20,1)
y=dpois(x, 0.2)
plot(x,y, ty='l')
y=dpois(x, 0.5)
lines(x,y)
y=dpois(x, 4)
lines(x,y)
y=dpois(x, 8)
lines(x,y)
y=dpois(x, 0.8)
lines(x,y)
plot(x,y, ty='l', xlab=x, ylab='density')
plot(x,y, ty='l', xlab=, ylab='density')
plot(x,y, ty='l', xlab='x', ylab='density')
y=dpois(x, 5)
lines(x,y)
y=dpois(x, 12)
lines(x,y)
y=dpois(x, 0.8)
plot(x,y, ty='l', xlab='x', ylab='density')
y=dpois(x, 5)
lines(x,y)
hist(y)
plot(x,y,ty='s')
plot(x,y,ty='o')
plot(x,y,ty='h')
plot(x,y,ty='h', lwd=3)
y=dpois(x, 0.8)
plot(x,y,ty='h', lwd=5, xlab='x', ylab='density')
y=dpois(x, 5)
points(x,y, ty='h', col='red',lwd=3)
y=dpois(x, 12)
points(x,y, ty='h', col='orange',lwd=1)
points(x,y, ty='h', col='gray',lwd=1)
points(x,y, ty='h', col='blue',lwd=1)
y=dpois(x, 0.8)
plot(x,y,ty='h', lwd=5, xlab='x', ylab='density')
y=dpois(x, 5)
points(x,y, ty='h', col='orange',lwd=3)
y=dpois(x, 12)
points(x,y, ty='h', col='red',lwd=1)
2e6*0.04
require(rstan)#
set.seed(1) #set seed
data = read.csv('/Users/maggielieu/Desktop/STAN/GITHUB/STAN_tutorials/Hierarchical/premiereleague.csv',col.names = c('Home','score1', 'score2', 'Away'), stringsAsFactors = FALSE)
teams = unique(data$Home)#
ht = unlist(sapply(1:ng, function(g) which(teams == data$Home[g])))#
at = unlist(sapply(1:ng, function(g) which(teams == data$Away[g])))
ng = nrow(data)
nt = length(unique(data$Home))
teams = unique(data$Home)#
ht = unlist(sapply(1:ng, function(g) which(teams == data$Home[g])))#
at = unlist(sapply(1:ng, function(g) which(teams == data$Away[g])))
0.047*2e6
800/2e6
0.0004
143.74-47.72
(143.74-47.72)/22
(143.74-47.72)/22/10*5
(143.74-47.72)/22/10*50
357+36
291+36
327+36
327+36+36
399+37
399+36
399+36+36
721+36
757+36
757+36+36
757+36+36+36
0.00379808*13130.31+0.13+0.01809664*#
8267.83+0.38
149.62+0.38+49.87+0.13
200-180
0.00389472*9986.34
0.00389472*10100
331.83*179.31
331.83/179.31
179.31/331.83
0.29492637 +#
0.17100590+ #
0.21660333
0.21660333*350
0.17100590*350
180*100000
0.018*100000
0.018*100001
0.018*101000
0.018*10100
0.05*2e6
100000
4665/20
R
setwd('Desktop/STAN/GITHUB/STAN_tutorials/Gaussian_processes_I/')
library(rstan)
stan_data = read_rdump('gp-fit.data.R')
N
stan_data
plot(stan_data$x, stan_data$y)
diff(stan_data$x)
round(0.5)
round(1.5)
round(2.5)
data$N
stan_data$N
fit_gp <- stan(file="gp-fit.stan", data=stan_data,#
               iter=200, chains=3);
602/7
3917/20
3917/20/3
566/60
x=seq(0,20,0.5)
y=lgamma(x)
y=dgamma(x, shape=5, rate=5)
plot(x,y)
plot(x,y,ty='l')
x=seq(0,20,0.1)
y=dgamma(x, shape=5, rate=5)
plot(x,y,ty='l')
install.packages('invgamma')
require(invgamma)
y2=dinvgamma(x,2,20)
lines(x, y2, lty='dotted', col='red')
y=dgamma(x, shape=5, rate=20)
lines(x, y, lty='dotted', col='red')
y=dgamma(x, shape=2, rate=20)
lines(x, y, lty='dotted', col='red')
y=dgamma(x, shape=5, rate=5)
lines(x, y, lty='dotted', col='red')
y=dgamma(x, shape=1, rate=5)
lines(x, y, lty='dotted', col='red')
y=dgamma(x, shape=1, rate=1)
lines(x, y, lty='dotted', col='blue')
y=dgamma(x, shape=2, rate=2)
lines(x, y, lty='dotted', col='blue')
5964/20
5964/19
5000/19
5000/20
1025*3+99*5
(1025*3+99*5)/19
(3417.83+99*5)/19
(3417.83+99*5)/19/3
(3417.83+99*5)/20
(3417.83+99*5)/20/3
(3417.83+99*5+350)/20/3
(3417.83+99*5+350)/19/3
(3417.83+99*5+350)/19
225+30+30+30
225+25+25+25+10
60*20
6000/20/3
5069/20
5069/20/3
