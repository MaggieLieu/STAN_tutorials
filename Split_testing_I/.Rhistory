plot(seq(0,10,0.1), dnorm(seq(0,10,0.1),1,1), cex.axis=2)
plot(seq(0,10,0.1), dnorm(seq(0,10,0.1),1,1), cex.axis=2,cex.labels=2)
plot(seq(0,10,0.1), dnorm(seq(0,10,0.1),1,1), cex.axis=2,cex.lab=2)
plot(seq(0,10,0.1), dnorm(seq(0,10,0.1),1,1), cex.axis=2,cex.lab=2, cex.yaxis=2)
plot(seq(0,10,0.1), dnorm(seq(0,10,0.1),1,1), cex.axis=2,cex.lab=2, cex.axes=2)
source('~/.active-rstudio-document', echo=TRUE)
par(oma=c(2,2,1,1))
plot(seq(0,10,0.1), dnorm(seq(0,10,0.1),1,1), cex.axis=2,cex.lab=2, cex.axes=2)
par(oma=c(2,2,1,1),mar=c(4,4,1,1))
plot(seq(0,10,0.1), dnorm(seq(0,10,0.1),1,1), cex.axis=2,cex.lab=2, cex.axes=2)
lodds = 1/c(45057474,7509579, 144415, 2180, 97, 10.3)
lodds
lprizes
source('~/Desktop/lotto_v_euromillions.R', echo=TRUE)
source('~/Desktop/lotto_v_euromillions.R', echo=TRUE)
source('~/Desktop/lotto_v_euromillions.R', echo=TRUE)
source('~/Desktop/lotto_v_euromillions.R', echo=TRUE)
plot(lodds, lprizes, ty='l', log='xy', xlab='prize [£]', ylab='odds')
y
lprizes
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds')
legend('topright', legend = c('lotto'), col=c('black'), lty=c('solid '))
legend('topright', legend = c('lotto'), col=c('black'), lty=c('solid'), bty='n')
legend('topright', legend = c('lotto'), col=c('black'), ty=c('solid'), bty='n')
legend('topright', legend = c('lotto'), color=c('black'), ty=c('solid'), bty='n')
legend('topright', legend = c('lotto'), c=c('black'), ty=c('solid'), bty='n')
legend('topright', legend = c('lotto'), col=c('black'), ty=c('solid'), bty='n')
legend('topright', legend = c('lotto'), col=c('black'), lty=c('solid'), bty='n')
legend('topright', legend = c('lotto'), col=c('black'), lty=c('solid'), bty='n')
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds')
eprizes = c(44236509, 315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
length(eprizes)
eodds = 1/c(139838160, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
length(eodds)
millionaireodds = mean(1/c(3.5e6, 5e6, 4.6e6, 6.4e6))
millionaireodds
eodds
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
# Should you play lotto or euromillions?
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l', log='xy', col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
require(magicaxis)
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2, axes=FALSE)
lines(eodds, eprizes, ty='l', log='xy', col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
magaxis(1:2); magaxis(3:4, labels=FALSE)
install.packages('sm')
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
# Should you play lotto or euromillions?
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l', log='xy', col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
1/103
1/104
abline(v=1/104)
for(i in 1:10){print(i)}
plays=1e-3;lines(c(plays, plays), c(0,10))
plays=1e-3;lines(c(plays, plays), c(0,100))
plays=1e-3;lines(c(plays, plays), c(0,100))
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l', log='xy', col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
for(i in 1:20){
plays = i*104 #104 draws per year
lines(c(plays, plays), c(0,50), lwd=2)
}
1e2
# Should you play lotto or euromillions?
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l', log='xy', col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
for(i in 1:20){
plays = i*104 #104 draws per year
lines(c(plays, plays), c(0,100), lwd=2)
}
# Should you play lotto or euromillions?
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l', log='xy', col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
for(i in 1:20){
plays = i*104 #104 draws per year
lines(c(plays, plays), c(0,100), lwd=2)
}
# Should you play lotto or euromillions?
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l',  col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
for(i in 1:20){
plays = i*104 #104 draws per year
lines(c(plays, plays), c(0,100), lwd=2)
}
# Should you play lotto or euromillions?
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l',  col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
for(i in 1:20){
plays = 1/(i*104) #104 draws per year
lines(c(plays, plays), c(0,100), lwd=2)
}
plays
lines(c(1e-3,1e-3), c(0,100))
lines(c(1e-3,1e-3), c(0,1000))
# Should you play lotto or euromillions?
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l',  col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
for(i in 1:20){
plays = 1/(i*104) #104 draws per year
lines(c(plays, plays), c(0,100), lwd=2)
}
# Should you play lotto or euromillions?
#lotto odds
lodds = 1/c(45057474,7509579, 144415, 2180, 97)
ljackpot = mean(c(5078822, 3800000, 12634862, 10884211, 8609036))
lprizes = c(ljackpot, 1e6, 1750, 140, 30)
#euromillions odds
millionaireodds = mean(c(3.5e6, 5e6, 4.6e6, 6.4e6))
eodds = 1/c(139838160, millionaireodds, 6991908, 3107515, 621503, 31075, 14125, 13811, 985,706,314,188,49,22)
eprizes = c(44236509, 1000000,315019, 50213,2944, 135, 54, 61, 13, 10, 8, 7, 5, 3)
plot(lodds, lprizes, ty='l', log='xy', ylab='prize [£]', xlab='odds', lwd=2)
lines(eodds, eprizes, ty='l',  col='orange',lwd=2)
legend('topright', legend = c('lotto', 'euromil'), col=c('black','orange'), lty=c('solid'), bty='n')
for(i in 1:20){
plays = 1/(i*104) #104 draws per year
lines(c(plays, plays), c(0.1,10), lwd=2)
}
45057474/104
install.packages('digest', 'httr', 'jsonlite')
shiny::runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
if (interactive()) {
ui <- fluidPage(
actionButton("update", "Update other buttons"),
br(),
actionButton("goButton", "Go"),
br(),
actionButton("goButton2", "Go 2", icon = icon("area-chart")),
br(),
actionButton("goButton3", "Go 3")
)
server <- function(input, output, session) {
observe({
req(input$update)
# Updates goButton's label and icon
updateActionButton(session, "goButton",
label = "New label",
icon = icon("calendar"))
# Leaves goButton2's label unchaged and
# removes its icon
updateActionButton(session, "goButton2",
icon = character(0))
# Leaves goButton3's icon, if it exists,
# unchaged and changes its label
updateActionButton(session, "goButton3",
label = "New label 3")
})
}
shinyApp(ui, server)
}
if (interactive()) {
library(shiny)
library(shinyMobile)
shiny::shinyApp(
ui = f7Page(
title = "Update f7Button",
init = f7Init(theme = "light", skin = "ios"),
f7SingleLayout(
navbar = f7Navbar(title = "Update f7Button"),
f7Button(
"test",
"Test",
color = "orange",
outline = FALSE,
fill = TRUE,
shadow = FALSE,
rounded = FALSE,
size = NULL),
f7Toggle("prout", "Update Button")
)
),
server = function(input, output, session) {
observe(print(input$test))
observeEvent(input$prout, {
if (input$prout) {
updateF7Button(
inputId = "test",
label = "Updated",
color = "purple",
shadow = TRUE,
rounded = TRUE,
size = "large"
)
}
})
}
)
}
if (interactive()) {
library(shiny)
library(shinyMobile)
shiny::shinyApp(
ui = f7Page(
title = "Update f7Button",
init = f7Init(theme = "light", skin = "ios"),
f7SingleLayout(
navbar = f7Navbar(title = "Update f7Button"),
f7Button(
"test",
"Test",
color = "orange",
outline = FALSE,
fill = TRUE,
shadow = FALSE,
rounded = FALSE,
size = NULL),
f7Toggle("prout", "Update Button")
)
),
server = function(input, output, session) {
observe(print(input$test))
observeEvent(input$prout, {
if (input$prout) {
updateF7Button(
inputId = "test",
label = "Updated",
color = "purple",
shadow = TRUE,
rounded = TRUE,
size = "large"
)
}
})
}
)
}
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp()
runApp()
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
html("element", paste0("The date is ", date()))
})
}
)
}
## Not run:
# The shinyjs function call in the above app can be replaced by
# any of the following examples to produce similar Shiny apps
html("element", "Hello!")
html("element", " Hello!", TRUE)
html("element", "<strong>bold</strong> that was achieved with HTML")
local({val <- "some text"; html("element", val)})
html(id = "element", add = TRUE, html = input$btn)
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
if (interactive()) {
library(shiny)
library(shinyMobile)
ui <- f7Page(
f7SingleLayout(
navbar = f7Navbar(title = "updateF7Text"),
f7Fab("trigger", "Click me"),
f7Text(
inputId = "text",
label = "Caption",
value = "Some text",
placeholder = "Your text here"
),
verbatimTextOutput("value")
)
)
server <- function(input, output, session) {
output$value <- renderPrint(input$text)
observeEvent(input$trigger, {
updateF7Text(session, "text", value = "Updated Text")
})
}
shinyApp(ui, server)
}
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp()
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp()
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp()
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
if (interactive()) {
shiny::shinyApp(
ui = shiny::fluidPage(
useShinyjs(),  # Set up shinyjs
shiny::actionButton("btn", "Click me"),
p(id = "element", "Click me to change my text"),
verbatimTextOutput("element")
),
server = function(input, output) {
# Change the following lines for more examples
onclick("btn", info(date()))
onclick("element", output$element <- renderPrint({runif(n = 1,0,1000)}))
}
)
}
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp()
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
runApp('Documents/Projects/LoveMatchCalc/LoveMatchCalculator')
data(iris)
head(iris)
versicolor = which(iris$Species == 'versicolor')
x = iris$Sepal.Length[versicolor]
y = iris$Petal.Length[versicolor]
data = list(
N = length(x),
x = x,
y = y
)
data = list(
N = length(x),
x = x,
y = y
)
require(rstan)
fit = stan(file = 'model.stan',data=data)
print(fit)
plot(x,y)
params = extract(fit)
alpha = mean(params$alpha)
beta = mean(params$beta)
abline(a=alpha, b=beta)
xr=seq(4,7.5,0.1)
yCI = sapply(xr, function(x) quantile(params$beta*x + params$alpha, probs=c(0.05,0.95) ))
lines(xr, yCI[1,], col='red')
plot(x,y)
params = extract(fit)
alpha = mean(params$alpha)
beta = mean(params$beta)
abline(a=alpha, b=beta)
xr=seq(4,7.5,0.1)
yCI = sapply(xr, function(x) quantile(params$beta*x + params$alpha, probs=c(0.05,0.95) ))
lines(xr, yCI[1,], col='red')
lines(xr, yCI[2,], col='red')
plot(density(y), xlim=c(2,6.5), ylim=c(0,1.4))
for(i in 1:10){lines(density(params$y_sim[i,]), col='red')}
y_new = params$y_sim[20, ] #20th simulated dataset
data_new = list(
N = length(x),
x = x,
y = y_new
)
fit_new = stan(file ='model.stan', data=data_new)
par(mfrow=c(1,2))
params_new=extract(fit_new)
plot(density(params$alpha))
lines(density(params_new$alpha),col='red')
plot(density(params$beta))
lines(density(params_new$beta),col='red')
#get packages
require(rstan)
#get data
input = read.table('data.txt')
setwd('Desktop/STAN/GITHUB/STAN_tutorials/Split_testing_I/')
#get data
input = read.table('data.txt')
#get data
input = read.table('data.txt', header=TRUE)
data = list(y1 = input$facebook, y2 = input$twitter, length = length(input$facebook))
#get data
input = read.table('data.txt', header=TRUE)
data = list(y1 = input$facebook, y2 = input$twitter, length = length(input$facebook))
print(data)
#get data
input = read.csv('data.txt')
data = list(y1 = input$facebook, y2 = input$twitter, length = length(input$facebook))
print(data)
#get data
input = read.csv('data.txt')
data = list(y1 = input$facebook, y2 = input$twitter, length = length(input$facebook))
print(data)
#fit stan model
fit = stan(file='my_model.stan', data=data)
#fit stan model
fit = stan(file='my_model.stan', data=data)
#fit stan model
fit = stan(file='my_model.stan', data=data)
summary(fit)
#get data
input = read.csv('data.txt')
data = list(y1 = input$facebook, y2 = input$twitter, n = length(input$facebook))
print(data)
#fit stan model
fit = stan(file='my_model.stan', data=data)
summary(fit)
#extract the parameters and plot the marginalised posteriors
params = extract(fit)
plot(density(params$theta1), main='', xlab='Click-through-rate', ylab='Probability', lwd=2, xlim=c(0,0.9))
lines(density(params$theta2), lty='dashed', col='gray',lwd=2)
legend('topright', legend=c('theta1', 'theta2'), lty=c('solid', 'dashed'), col=c('black', 'gray'),lwd=2, bty='n')
# plot the generated quantity, the difference between the rates
plot(density(params$Delta_theta), main='', xlab=expression(Delta*theta), ylab='Probability',lwd=2)
fit2 = stan(file='my_model.stan', data=data2)
input2 = read.csv('data2.txt')
data2 = list(y1 = input2$facebook, y2 = input2$twitter, n = length(input2$facebook))
fit2 = stan(file='my_model.stan', data=data2)
summary(fit)
params=extract(fit)
plot(density(params$theta1), main='', xlab='Click-through-rate', ylab='Probability', lwd=2, xlim=c(0,0.9), ylim=c(0,8.2))
lines(density(params$theta2), lty='dashed', col='gray',lwd=2)
legend('topright', legend=c(paste(5, ' samples', sep=''),'theta1', 'theta2'), lty=c('solid','solid', 'dashed'), col=c('white', 'black', 'gray'),lwd=2, bty='n')
